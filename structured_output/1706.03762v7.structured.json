{
  "filename": "1706.03762v7.pdf",
  "sections": [
    {
      "heading": "Introduction",
      "text": "Recurrent neural networks, long short-term memory\nRecurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states h t , as a function of the previous hidden state h t-1 and the input for position t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples. Recent work has achieved significant improvements in computational efficiency through factorization tricks\nAttention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs."
    },
    {
      "heading": "Background",
      "text": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks\nTo the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as"
    },
    {
      "heading": "Model Architecture",
      "text": "Most competitive neural sequence transduction models have an encoder-decoder structure"
    },
    {
      "heading": "Encoder and Decoder Stacks",
      "text": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection\nDecoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position i can depend only on the known outputs at positions less than i."
    },
    {
      "heading": "Attention",
      "text": "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum Scaled Dot-Product Attention Multi-Head Attention of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key."
    },
    {
      "heading": "Scaled Dot-Product Attention",
      "text": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure\nIn practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V . We compute the matrix of outputs as:\nThe two most commonly used attention functions are additive attention\n. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.\nWhile for small values of d k the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d k"
    },
    {
      "heading": "Multi-Head Attention",
      "text": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k , d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure\nMulti-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.\nwhere\nWhere the projections are parameter matrices\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\nDue to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality."
    },
    {
      "heading": "Applications of Attention in our Model",
      "text": "The Transformer uses multi-head attention in three different ways:\n\u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.\n\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to -\u221e) all values in the input of the softmax which correspond to illegal connections. See Figure"
    },
    {
      "heading": "Position-wise Feed-Forward Networks",
      "text": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.\nWhile the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is d model = 512, and the inner-layer has dimensionality d f f = 2048."
    },
    {
      "heading": "Embeddings and Softmax",
      "text": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension d model . We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to"
    },
    {
      "heading": "Positional Encoding",
      "text": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed\nIn this work, we use sine and cosine functions of different frequencies:\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0 to 10000 \u2022 2\u03c0. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k, P E pos+k can be represented as a linear function of P E pos .\nWe also experimented with using learned positional embeddings"
    },
    {
      "heading": "Why Self-Attention",
      "text": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1 , ..., x n ) to another sequence of equal length (z 1 , ..., z n ), with x i , z i \u2208 R d , such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata.\nOne is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required.\nThe third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies\nAs noted in Table\nA single convolutional layer with kernel width k < n does not connect all pairs of input and output positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(log k (n)) in the case of dilated convolutions\nEven with k = n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.\nAs side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences."
    },
    {
      "heading": "Training",
      "text": "This section describes the training regime for our models."
    },
    {
      "heading": "Training Data and Batching",
      "text": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding"
    },
    {
      "heading": "Hardware and Schedule",
      "text": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table"
    },
    {
      "heading": "Optimizer",
      "text": "We used the Adam optimizer\nThis corresponds to increasing the learning rate linearly for the first warmup_steps training steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We used warmup_steps = 4000."
    },
    {
      "heading": "Regularization",
      "text": "We employ three types of regularization during training: Residual Dropout We apply dropout"
    },
    {
      "heading": "Label Smoothing",
      "text": "During training, we employed label smoothing of value \u03f5 ls = 0.1\n6 Results"
    },
    {
      "heading": "Machine Translation",
      "text": "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0, outperforming all of the previously published single models, at less than 1/4 the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout rate P drop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of 4 and length penalty \u03b1 = 0.6\nTable"
    },
    {
      "heading": "Model Variations",
      "text": "To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the . We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table\nIn Table\nIn Table"
    },
    {
      "heading": "English Constituency Parsing",
      "text": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes\nWe trained a 4-layer transformer with d model = 1024 on the Wall Street Journal (WSJ) portion of the Penn Treebank\nWe performed only a small number of experiments to select the dropout, both attention and residual (section 5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length + 300. We used a beam size of 21 and \u03b1 = 0.3 for both WSJ only and the semi-supervised setting.\nOur results in Table\nIn contrast to RNN sequence-to-sequence models"
    },
    {
      "heading": "Conclusion",
      "text": "In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at\nAttention Visualizations Input-Input Layer5 It is in this spirit that a majority of American governments have passed new laws since 2009 making the registration or voting process more difficult . <EOS> <pad> <pad> <pad> <pad> <pad> <pad> It is in this spirit that a majority of American governments have passed new laws since 2009 making the registration or voting process more difficult . <EOS> <pad> <pad> <pad> <pad> <pad> <pad>"
    },
    {
      "heading": "Input-Input Layer5",
      "text": "The Law will never be perfect , but its application should be just this is what we are missing , in my opinion . <EOS> <pad> The Law will never be perfect , but its application should be just this is what we are missing , in my opinion . <EOS> <pad> Input-Input Layer5 The Law will never be perfect , but its application should be just this is what we are missing , in my opinion . <EOS> <pad> The Law will never be perfect , but its application should be just -this is what we are missing , in my opinion . <EOS> <pad> Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word."
    },
    {
      "heading": "Input-Input Layer5",
      "text": "The Law will never be perfect , but its application should be just this is what we are missing , in my opinion . <EOS> <pad> The Law will never be perfect , but its application should be just -this is what we are missing , in my opinion . <EOS> <pad> Input-Input Layer5 The Law will never be perfect , but its application should be just this is what we are missing , in my opinion . <EOS> <pad> The Law will never be perfect , but its application should be just -this is what we are missing , in my opinion . <EOS> <pad>"
    }
  ],
  "tei_figures": [
    {
      "id": "fig_0",
      "caption": "Figure 1: The Transformer -model architecture.",
      "type": "figure"
    },
    {
      "id": "fig_1",
      "caption": "Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.",
      "type": "figure"
    },
    {
      "id": "fig_2",
      "caption": "Figure 3: An example of the attention mechanism following long-distance dependencies in the encoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of the verb 'making', completing the phrase 'making...more difficult'. Attentions here shown only for the word 'making'. Different colors represent different heads. Best viewed in color.",
      "type": "figure"
    },
    {
      "id": "fig_3",
      "caption": "Figure4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top: Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word.",
      "type": "figure"
    },
    {
      "id": "fig_4",
      "caption": "Figure5: Many of the attention heads exhibit behaviour that seems related to the structure of the sentence. We give two such examples above, from two different heads from the encoder self-attention at layer 5 of 6. The heads clearly learned to perform different tasks.",
      "type": "figure"
    },
    {
      "id": "tab_0",
      "caption": "Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention.",
      "type": "figure"
    },
    {
      "id": "tab_1",
      "caption": "The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.",
      "type": "figure"
    },
    {
      "id": "tab_2",
      "caption": "Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.",
      "type": "figure"
    },
    {
      "id": "tab_3",
      "caption": "The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)",
      "type": "figure"
    }
  ],
  "tei_tables": [
    {
      "id": "unknown",
      "caption": "No caption",
      "type": "table",
      "content": [
        [
          "Layer Type",
          "Complexity per Layer Sequential Maximum Path Length"
        ],
        [
          "",
          "Operations"
        ],
        [
          "Self-Attention",
          "O"
        ]
      ]
    },
    {
      "id": "unknown",
      "caption": "No caption",
      "type": "table",
      "content": [
        [
          "Model",
          "BLEU EN-DE EN-FR",
          "Training Cost (FLOPs) EN-DE EN-FR"
        ],
        [
          "ByteNet [18]",
          "23.75",
          "",
          ""
        ],
        [
          "Deep-Att + PosUnk [39]",
          "",
          "39.2",
          "1.0 \u2022 10 20"
        ],
        [
          "GNMT + RL [38]",
          "24.6",
          "39.92",
          "2.3 \u2022 10 19 1.4 \u2022 10 20"
        ],
        [
          "ConvS2S [9]",
          "25.16",
          "40.46",
          "9.6 \u2022 10 18 1.5 \u2022 10 20"
        ],
        [
          "MoE [32]",
          "26.03",
          "40.56",
          "2.0 \u2022 10 19 1.2 \u2022 10 20"
        ],
        [
          "Deep-Att + PosUnk Ensemble [39]",
          "",
          "40.4",
          "8.0 \u2022 10 20"
        ],
        [
          "GNMT + RL Ensemble [38]",
          "26.30",
          "41.16",
          "1.8 \u2022 10 20 1.1 \u2022 10 21"
        ],
        [
          "ConvS2S Ensemble [9]",
          "26.36",
          "41.29",
          "7.7 \u2022 10 19 1.2 \u2022 10 21"
        ],
        [
          "Transformer (base model)",
          "27.3",
          "38.1",
          "3.3 \u2022 10 18"
        ],
        [
          "Transformer (big)",
          "28.4",
          "41.8",
          "2.3 \u2022 10 19"
        ]
      ]
    },
    {
      "id": "unknown",
      "caption": "No caption",
      "type": "table",
      "content": [
        [
          "",
          "N d model",
          "d ff",
          "h",
          "d k",
          "d v",
          "P drop \u03f5 ls",
          "train steps (dev) (dev) PPL BLEU params \u00d710 6"
        ],
        [
          "base 6",
          "512",
          "2048 8",
          "64",
          "64",
          "0.1",
          "0.1 100K 4.92",
          "25.8",
          "65"
        ],
        [
          "",
          "",
          "",
          "",
          "1 512 512",
          "",
          "",
          "5.29",
          "24.9"
        ],
        [
          "(A)",
          "",
          "",
          "",
          "4 128 128 16 32 32",
          "",
          "",
          "5.00 4.91",
          "25.5 25.8"
        ],
        [
          "",
          "",
          "",
          "",
          "32 16",
          "16",
          "",
          "",
          "5.01",
          "25.4"
        ],
        [
          "(B)",
          "",
          "",
          "",
          "",
          "16 32",
          "",
          "",
          "",
          "5.16 5.01",
          "25.1 25.4",
          "58 60"
        ],
        [
          "",
          "2",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "6.11",
          "23.7",
          "36"
        ],
        [
          "",
          "4",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "5.19",
          "25.3",
          "50"
        ],
        [
          "",
          "8",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "4.88",
          "25.5",
          "80"
        ],
        [
          "(C)",
          "",
          "256",
          "",
          "",
          "32",
          "32",
          "",
          "",
          "5.75",
          "24.5",
          "28"
        ],
        [
          "",
          "",
          "1024",
          "",
          "",
          "128 128",
          "",
          "",
          "4.66",
          "26.0",
          "168"
        ],
        [
          "",
          "",
          "",
          "1024",
          "",
          "",
          "",
          "",
          "",
          "5.12",
          "25.4",
          "53"
        ],
        [
          "",
          "",
          "",
          "4096",
          "",
          "",
          "",
          "",
          "",
          "4.75",
          "26.2",
          "90"
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "0.0",
          "",
          "5.77",
          "24.6"
        ],
        [
          "(D)",
          "",
          "",
          "",
          "",
          "",
          "",
          "0.2",
          "0.0",
          "4.95 4.67",
          "25.5 25.3"
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "0.2",
          "5.47",
          "25.7"
        ],
        [
          "(E)",
          "",
          "positional embedding instead of sinusoids",
          "4.92",
          "25.7"
        ],
        [
          "big",
          "6",
          "1024 4096 16",
          "",
          "",
          "0.3",
          "",
          "300K 4.33",
          "26.4",
          "213"
        ],
        [
          "development set, newstest2013",
          "",
          "",
          "",
          "",
          ""
        ]
      ]
    },
    {
      "id": "unknown",
      "caption": "No caption",
      "type": "table",
      "content": [
        [
          "Parser",
          "Training",
          "WSJ 23 F1"
        ],
        [
          "Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative",
          "88.3"
        ],
        [
          "Petrov et al. (2006) [29]",
          "WSJ only, discriminative",
          "90.4"
        ],
        [
          "Zhu et al. (2013) [40]",
          "WSJ only, discriminative",
          "90.4"
        ],
        [
          "Dyer et al. (2016) [8]",
          "WSJ only, discriminative",
          "91.7"
        ],
        [
          "Transformer (4 layers)",
          "WSJ only, discriminative",
          "91.3"
        ],
        [
          "Zhu et al. (2013) [40]",
          "semi-supervised",
          "91.3"
        ],
        [
          "Huang & Harper (2009) [14]",
          "semi-supervised",
          "91.3"
        ],
        [
          "McClosky et al. (2006) [26]",
          "semi-supervised",
          "92.1"
        ],
        [
          "Vinyals & Kaiser el al. (2014) [37]",
          "semi-supervised",
          "92.1"
        ],
        [
          "Transformer (4 layers)",
          "semi-supervised",
          "92.7"
        ],
        [
          "Luong et al. (2015) [23]",
          "multi-task",
          "93.0"
        ],
        [
          "Dyer et al. (2016) [8]",
          "generative",
          "93.3"
        ]
      ]
    }
  ],
  "pdffigures2": []
}